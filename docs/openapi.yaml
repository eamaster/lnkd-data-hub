openapi: 3.0.3
info:
  title: LinkedIn Data Hub Proxy API
  version: 0.1.0
servers:
  - url: https://<your-worker>.<subdomain>.workers.dev
paths:
  /api/search/people:
    get:
      summary: Search people
      parameters:
        - in: query
          name: q
          schema: { type: string }
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 50 }
        - in: query
          name: offset
          schema: { type: integer, minimum: 0 }
        - in: query
          name: location
          schema: { type: string }
        - in: query
          name: function
          schema: { type: string }
      responses:
        '200': { description: OK }
  /api/search/companies:
    get:
      summary: Search companies
      parameters:
        - in: query
          name: q
          schema: { type: string }
        - in: query
          name: industry
          schema: { type: string }
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 50 }
        - in: query
          name: offset
          schema: { type: integer, minimum: 0 }
      responses:
        '200': { description: OK }
  /api/search/products:
    get:
      summary: Search products
      parameters:
        - in: query
          name: q
          schema: { type: string }
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 50 }
        - in: query
          name: offset
          schema: { type: integer, minimum: 0 }
        - in: query
          name: offsite
          schema: { type: integer, enum: [0,1] }
      responses:
        '200': { description: OK }
  /api/search/jobs:
    get:
      summary: Search jobs
      parameters:
        - in: query
          name: q
          schema: { type: string }
        - in: query
          name: location
          schema: { type: string }
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 50 }
        - in: query
          name: offset
          schema: { type: integer, minimum: 0 }
      responses:
        '200': { description: OK }
  /api/search/posts:
    get:
      summary: Search posts
      parameters:
        - in: query
          name: q
          schema: { type: string }
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 50 }
        - in: query
          name: offset
          schema: { type: integer, minimum: 0 }
      responses:
        '200': { description: OK }
  /api/events:
    get:
      summary: List events
      parameters:
        - in: query
          name: status
          schema: { type: string, enum: [upcoming, ongoing] }
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 50 }
      responses:
        '200': { description: OK }
  /api/companies/{companyId}:
    get:
      summary: Company details
      parameters:
        - in: path
          name: companyId
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
  /api/companies/{companyId}/employees:
    get:
      summary: Company employees
      parameters:
        - in: path
          name: companyId
          required: true
          schema: { type: string }
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 50 }
      responses:
        '200': { description: OK }
  /api/products/{productId}:
    get:
      summary: Product details
      parameters:
        - in: path
          name: productId
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
  /api/products/trending:
    get:
      summary: Trending products
      parameters:
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 50 }
      responses:
        '200': { description: OK }
  /api/jobs/{jobId}:
    get:
      summary: Job details
      parameters:
        - in: path
          name: jobId
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
  /api/posts/{postId}:
    get:
      summary: Post details
      parameters:
        - in: path
          name: postId
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
  /api/posts/{postId}/comment:
    post:
      summary: Create comment (or store locally if unsupported)
      parameters:
        - in: path
          name: postId
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text: { type: string }
              required: [text]
      responses:
        '200': { description: OK }
  /api/admin/usage:
    get:
      summary: Admin usage
      responses:
        '200': { description: OK }
  /api/admin/refresh-cache:
    post:
      summary: Admin refresh cache
      responses:
        '200': { description: OK }
